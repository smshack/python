print('*****************함수************************')
print('함수란 특정한 작업을 하나의 단위로 묶어 놓은 것을 의미')
print('함수를 사용하면 불필요한 소스코드의 반복을 줄일 수 있음')
print('')
print('-- 함수의 종류')
print('내장 함수: 파이썬이 기본적으로 제공하는 함수')
print('사용자 정의 함수: 개발자가 직접 정의하여 사용할 수 있는 함수')
print('')
print('매개변수: 함수 내부에서 사용할 변수')
print('반환 값: 함수에서 처리된 결과를 반환')
print('def 함수명(매개변수):')
print('     실행할 소스코드')
print('     return 반환값')
print('')


print('****************************************************')
print('***********기본 사용 방법*************')


def add(a, b):
    return a+b


print(add(5, 6))
print('----------------------------------------------')
print('***********파라미터 지정하기*************')
print('파라미터의 변수를 직접 지정 가능')
print('이 경우 매개변수의 순서가 달라도 상관 없음')
print('----------------------------------------------')


def add1(a, b):
    return b


print(add1(b=5, a=6))
print('')

c = 8


def func():
    global c
    c += 7


func()
print(c)
print('----------------------------------------------')
print('***********여러개의 반환 값을 가질수 있음*************')

print('----------------------------------------------')


def operator(a, b):
    return a+b, a-b, a*b, a/b


a, b, c, d = operator(3, 7)
print(a, b, c, d)
e = operator(3, 7)
print(e)
print('----------------------------------------------')
print('***********람다 표현식*************')
print('함수를 매우 간단하게 작성할 수 있음')
print('특정한 기능을 수행하는 함수를 한 줄에 작성할 수 있다는 점이 특징')
print('')
print((lambda a, b: a+b)(3, 5))
print('함수 자체를 입력으로 받는 경우에 주로 사용')
print('')
print('')
print('')
array = [('홍길동', 50), ('이순신', 32), ('아무개', 74)]


def my_key(x):
    return x[1]


print(sorted(array, key=my_key))
print(sorted(array, key=lambda x: x[1]))

print('----------------------------------------------')
print('람다 표현식 예시: 여러개의 리스트에 적용')
list1 = [1, 2, 3, 4, 5]
list2 = [6, 7, 8, 9, 10]

result = map(lambda a, b: a+b, list1, list2)
print(list(result))
print('***********************************************************')
