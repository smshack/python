print('*****************리스트  자료형************************')
print('여러 개의 데이터를 연속적으로 담아 처리하기 위해 사용하는 자료형')
print('사용자 입장에서  C나 자바에서의 배열(Array)의 기능 뿐 아니라 연결 리스트의 기능을 지원')
print('C++의 STL vector와 기능적으로 유사')
print('리스트 대신에 배열 혹은 테이블이라고 부르기도 함')
print('리스트는 대괄호[] 안에 원소를 넣어 초기화하며, 쉼표(,)로 원소를 구분')
print('리스트의 원소에 접근할 때는 인덱스(index) 값을 괄호에 넣음')
print('인덱스는 0부터 시작함')
print('비어 있는 리스트를 선언하고자 할 때는 list() 혹은 간단히 []를 이용할 수 있음')
print('****************************************************')
print('-- 직접 데이터를 넣어 초기화')
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a)

print('-- 크기가 N이고 , 모든 값이 0인 1차원 리스트 초기화')
n = 10
a = [0]*n
print(a)
print('------------------------------------------------------------')
print('*****************리스트의 인덱싱************************')
a = [0, 1, 2, 3, 4, 5, 6, 7]
print('-- 뒤에서 첫 번째 원소 출력')
print(a[-1])
print('-- 뒤에서 세번째 원소 출력')
print(a[-3])
print('-- 네 번째 원소 값 변경')
print(a[3])
a[3] = 10
print(a[3])
print('------------------------------------------------------------')

print('*****************리스트의 슬라이싱************************')
print('리스트에서 연속적인 위치를 갖는 원소들을 가져와야 할 때는 슬라이싱(Slicing)을 이용한다')
print(' 대괄호 안에 콜론(:)을 넣어서 시작 인덱스와 끝 인덱스를 설정할 수 있음')
print('끝 인덱스는 실제 인덱스보다 1을 더 크게 설정')
a = [3, 5, 4, 3, 2]
print(a[1:5])
print('------------------------------------------------------------')

print('*****************리스트 컴프리헨션************************')
print('리스트를 초기화하는 방법 중 하나')
print('대괄호 안에 조건문과 반복문을 적용하여 리스트를 초기화 할 수 있음')
print('-- 0부터 9까지의 수를 포함하는 리스트')
array = [i for i in range(10)]
print(array)
print('-- 0부터 19가지의 수 중에서 홀수만 포함하는 리스트')
array = [i for i in range(20) if i % 2 == 1]
print(array)
print('-- 위랑 아래랑 같은 코드 입니다')
a = []
for i in range(20):
    if i % 2 == 1:
        a.append(i)
print(a)
print('-- 1부터 9까지의 수들의 제곱 값을 포함하는 리스트')
array = [i*i for i in range(1, 10)]
print(array)
print('------------------------------------------------------------')
print('리스트 컴프리헨션은 2차원 리스트를 초기화할 때 효과적으로 사용될 수 있음')
print('특히 N * N 크기의 2차원 리스트를 한번에 초기화 해야 할 때 매우 유용함')
print('좋은 예시: array =[[0]*m for _in range(n)]')
print('만약 2차원 리스트를 초기화 할 때 다음과 같이 작성하면 예기치 않은 결과가 나올 수 있음')
print('잘못된 예시 array =[[0]*m]*n')
print('위 코드는 리스트 안에 포함된 리스트가 모드 같은 객체로 인식됨')
print('------------------------------------------------------------')
print('-- N*M 크기의 2차원 리스트 초기화')
n = 4
m = 3
array = [[0] * m for _ in range(n)]
print(array)
array[1][1] = 5
print('array[1][1] = 5')
print(array)
print('-- N*M 크기의 2차원 리스트 초기화(잘못된 방법)')
n = 4
m = 3
array = [[0]*m]*n
print(array)
print('array[1][1] = 5')
array[1][1] = 5
print(array)
print('?????????')
print("언더바(_)반복을 할 때 따로 내부적으로 변수가 사용되지 않을 때 사용")
print('------------------------------------------------------------')
print('*****************리스트 관련 기타 메서드************************')
print('함수명       사용법                      설명                                    시간복잡도')
print('append()     변수명.append()             리스트에 원소를 하나 삽입할 때 사용         O(1)')
print('sort()       변수명.sort(reverse=ture)   기본 정렬 기능으로 오름(내림)차순으로 정렬   O(NlogN)')
print('reverse()    변수명.reverse()            리스트의 원소의 순서를 모두 뒤집어 놓는다    O(N)')
print('insert()     insert(삽입할 위치 인덱스, 값) 특정 인덱스 위치에 원소를 삽입             O(N) ')
print('count()      변수명.count(특정값)        리스트에서 특정한 값을 가지는 데이터의 개수   O(N)')
print('remove()     변수명.remove(특정값)       특정한 값을 갖는 원소를 제거하는데, 값을 가지 원소가 여러개면 하나만 제거')
print('')
print('------------------------------------------------------------')

a = [1, 4, 3]
print('기본 리스트: ', a)
print('')
print('-- 리스트에 원소 삽입')
a.append(2)
print('삽입: ', a)
print('')

print('-- 오름 차순 정렬')
a.sort()
print('오름차순 정렬: ', a)
print('')

print('-- 내림 차순 정렬')
a.sort(reverse=True)
print('내림차순 정렬: ', a)
print('')


print('-- 리스트의 원소 뒤집기')
a.reverse()
print('원소 뒤집기: ', a)
print('')

print('-- 특정 인덱스에 데이터 추가')
a.insert(2, 3)
print('인덱스 2에 3추가: ', a)
print('')

print('-- 특정 값인 데이터 개수 세기')
print('값이 3인 데이터 개수: ', a.count(3))
print('')

print('-- 특정 값 데이터 삭제')
a.remove(1)
print('값이 1인 데이터 삭제: ', a)
print('')


print('-- 반환값만 정렬하고 싶은 경우')
b = [5, 4, 3, 9, 10]
result = sorted(b)

print('b리스트', b)
print('정렬된 b리스트', result)
print('')

print('remove_set에 포함되지 않은 값만을 저장')
a = [1, 2, 3, 4, 5, 5, 5]
remove_set = {3, 5}

result = [i for i in a if i not in remove_set]
print(result)
print('------------------------------------------------------------')

'''
3 * 4 형태의 리스트
0   0   0   0
0   0   0   0   
0   0   0   0
'''
print('행수 입력: ')
n = int(input())
print('열수 입력: ')
m = int(input())

arr = []

for i in range(n):
    arr.append(list(map(int, input().split())))

print(arr)
